name: calculator CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    permissions: 
      contents: read
      checks: write

    runs-on: ubuntu-latest

    env: 
      PYTHONPATH: .

    steps:
      # Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Install Python packages needed for web testing
      - name: web testing dependencies
        run: |
          pip install playwright pytest

      # Install playwright 
      - name: Install Playwright
        run: |
          playwright install

      # run docker compose
      - name: Start Docker Compose
        run: |
          docker compose -p webcalculator up -d

      # Run web tests
      - name: Run web tests
        run: |
          pytest -v --junit-xml=web-report.xml test/web/

 # Dependencies from requirements file
      - name: Install dependencies
        run: |
          pip install -r BE/requirements.txt

      # Start API server
      - name: Start API server
        run: |
          # Start the API server in the background
          python BE/calculator.py --rest &

      # Run unit tests
      - name: Run unit tests
        run: |
          pytest -v --junit-xml=report.xml

        # Shows the test report on GitHub
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()  
        with:
          report_paths: '**/report.xml'

      #Login to Azure Container Registry / ACR
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: judevops.azurecr.io
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      #Builds and pushes Docker image
      - name: Build and push Docker image
        run: |
          IMAGE_NAME=judevops.azurecr.io/oscar_assaf_calculator
          docker build -t $IMAGE_NAME ./BE
          docker push $IMAGE_NAME
